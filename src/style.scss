$grid-breakpoints: (
xs: 0px,
sm: 560px,
md: 768px,
lg: 992px,
xl: 1200px,
xxl: 1500px
) !default

// Breakpoint viewport sizes and media queries.
//
// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.
// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @if not $n {
    @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
  }
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}
// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}
// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.02px
// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 0.02, null);
}
// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');
}
// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}
// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}
// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);
  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}
// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);
  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

@font-face {
  src: url(fonts/moon/light.otf);
  font-family: moon-light;
}

@font-face {
  src: url(fonts/moon/bold.otf);
  font-family: moon-bold;
}

@font-face {
  src: url(fonts/metropolis/Metropolis-Light.otf);
  font-family: metropolis-light;
}

@font-face {
  src: url(fonts/metropolis/Metropolis-Bold.otf);
  font-family: metropolis-bold;
}

$white: #fff;
$primary: #161F28;
$blue : #C7DEED;
$yellow: #FFF284;
$red: #FFA89B;
$dark: #161F28;

.container {
  max-width: 1330px;
  margin: auto;
}

body, html {
  margin: 0;
  padding: 0;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
  color: #161F28;
  justify-content: center;
  font-family: moon-light;
}

* {
  box-sizing: inherit;
}

.text {
  &--body {
    font-family: metropolis-light;
    font-size: 21px;
    line-height: 30px;
    margin: 0 0 15px;
  }
}

.heading {
  text-align: center;
  margin: 0;
  padding: 40px 0 40px;
  font-family: moon-bold;
    font-size: 35px;

  @include media-breakpoint-up(md) {
      font-size: 45px;
      padding: 60px 0 60px;
  }


  @include media-breakpoint-up(lg) {
    font-size: 55px;
    padding: 40px 0 50px;

  }
}

.subheading {
  font-size: 35px;
  text-align: left;
  margin: 0 0 20px;
  font-family: moon-light;

  &--small {
    font-size: 25px;
    margin: 0 0 15px;
  }
}

.module-padding {
  padding: 150px 0;

  &--no-top {
    padding-top: 0;
  }
}


/****************************** ABOUT *****************************************/

.about {
  text-align: center;
  padding: 0 15px;
  width: 100%;

  // @include media-breakpoint-up(lg) {
  //   height: 100vh;
  // }

  &__content-wrapper {
    display: flex;
    flex-direction: column;

    @include media-breakpoint-up(md) {
      flex-direction: row;
    }
  }

  &__text-wrapper {
    display: flex;
    flex-direction: column;
    text-align: left;
  }

  &__image-wrapper {
    margin: 0 15px 30px;
    max-width: 300px;
    flex-shrink: 0;
  }

  &__image {
    border-radius: 50%;
    width: 100%;
    padding: 0;
  }
}


/********************** GA Projects ************************************************/

.ga-projects {

  &__controls-block {
    position: absolute;
    top: 25px;
    right: 60px;
    height: 30px;
    width: 60px;

    @include media-breakpoint-up(md) {
      top: 30px;
      right: 55px;
      height: 160px;
      width: 120px;
    }

    @include media-breakpoint-up(lg) {
      right: 100px;
    }
  }

  &__controls-block-wrapper {
    position: relative;
    height: 100%;
    width: 100%;
  }

  &__project-title {
    max-width: 70%;

    @include media-breakpoint-up(md) {
      max-width: none;
    }
  }

  &__image-wrapper {
    display: block;
    margin: 0;
    margin-bottom: 20px;

    @include media-breakpoint-up(md) {
      width: 50%;
      margin-bottom: 0;
    }

    @include media-breakpoint-up(lg) {
      padding: 20px 40px;
        width: 55%;
    }
  }

  &__image {
    width: 100%;
  }

  &__content-wrapper {
    padding: 0 15px;
  }

  &__subtitle {
    margin-top: 0;
  }

  &__top-wrapper {
    margin-left: 0;
    margin-bottom: 30px;

    @include media-breakpoint-up(md) {
      width: 75%;
    }
  }

  &__body-wrapper {
    display: flex;
    flex-direction: column;

    @include media-breakpoint-up(md) {
      flex-direction: row;
      align-items: center;
    }
  }

  &__text-wrapper {
    display: flex;
    flex-direction: column;
    justify-content: left;

    @include media-breakpoint-up(md) {
      padding-left: 30px;
      width: 45%;

    }

    @include media-breakpoint-up(lg) {
      max-width: 320px;
      padding-left: 80px;
    }
  }

  &__cta {
    margin-right: 10px;
  }

  &__cta-wrapper {
    margin-top: 30px;
  }


  .swiper-slide {
    height: 100%;
    transition: all .5s ease;
  }

  .swiper-button-next,
  .swiper-button-prev {
    left: auto;
    height: 40px;
    width: 40px;
    right: 50%;

    &__chevron {
      height: 30px;
      width: 30px;
    }

    &:after {
      content: '';
    }
  }

  .swiper-pagination {
    display: none;

    @include media-breakpoint-up(md) {
      display: block;
      font-family: metropolis-light;
      bottom: 50%;
      transform: translateY(50%);
    }
  }

  .swiper-pagination-current {
    font-size: 80px;
  }

  .swiper-pagination-total {
    font-size: 40px;
    transform: translate(50%);
  }

  .swiper-button-next__chevron,
  .swiper-button-prev__chevron {
    transition: all .3s ease;
  }

  .swiper-button-next {
    transform:  translate(50%, 50%) rotate(90deg);
    bottom: 0;
    top: auto;
    right: 0;

    &:hover {
      .swiper-button-next__chevron {
        transform: translateY(-8px);
      }
    }
  }

  .swiper-button-prev {
    transform: translate(-50%, 0%) rotate(-90deg) ;
    top: 0;
    left: 0;
    bottom: auto;

    &:hover {
      .swiper-button-prev__chevron {
        transform: translateY(-8px);
      }
    }
  }
}



// /***************************** Break Images ***********************************/
.break-image {
  background-position: center;
  background-repeat: no-repeat;
  background-size: contain;
  // background-attachment: fixed;
  margin: 0;
  height: 100vh;
  /* transform: translateZ(-1px) scale(.9); */
}
//
#hero {
  background-image: url('./assets/finalName.png');
  // opacity: 0;
}
//
// #contact-break-image {
//   background-image: url('./assets/finalContact.png');
// }
//
// #skills-break-image {
//   background-image: url('./assets/finalSkills.png');
// }
//
// #project-break-image {
//   background-image: url('./assets/finalProjects.png');
// }
//
// #thanks-image {
//   background-image: url('./assets/finalThanks.png');
// }




/*************************** Nav ******************************************/

.nav {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  width: 100%;
  background-color: $white;
  transition: all .5s ease;
  overflow: hidden;

  &--hide {
    top: -152px;

    @include media-breakpoint-up(md) {
      top: -112px
    }

    @include media-breakpoint-up(lg) {
      top: -72px
    }
  }

  &__list {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    padding: 0 20px;
    list-style: none;
    justify-content: space-around;

    @include media-breakpoint-up(lg) {
      flex-direction: row;
      justify-content: space-between;

    }
  }

  &__link {
    color: $primary;
    text-decoration: none;
    font-family: metropolis-bold;
    padding: 10px 5px;
    display: flex;
    align-items: center;
    position: relative;
    border-radius: 8px;
    background-repeat: no-repeat;
    transition: background-size .3s cubic-bezier(0, .7, .3 ,1), color .3s ease-out;
    // background-image: linear-gradient($white, $white);

    &--effect {
      background-position: 50% 50%;
      background-size: 0% 0%
    }

    &--blue {
      background-image: linear-gradient($blue, $blue);
    }

    &--yellow {
      background-image: linear-gradient($yellow, $yellow);
    }

    &--red {
      background-image: linear-gradient($red, $red);
    }

    &:hover {
      background-size: 100% 100%;
    }
  }

  &__icon {
    width: 20px;
    height: 20px;
    margin-right: 10px;
  }
}



// ###################### icons #####################################


.cta {
  cursor: pointer;
  position: relative;
  display: inline-block;
  width: 140px;
  height: 50px;
  text-align: center;
  line-height: 50px;
  color: $primary;
  text-decoration: none;
  overflow: hidden;

  &:hover {
    span {
      color: $white;
    }
  }

  &::before, &::after{
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    transition: all 0.25s ease;
  }

  span {
    position: relative;
    color: $primary;
    transition: all 0.25s ease;
  }
}

.cta-fill{
  transition-duration: 0.5s;

  &--space {
    &::before{
      box-shadow: inset 0 0 0 1px $blue;
    }
    &:hover::before{
      box-shadow: inset 0 0 0 50px $blue;
    }
  }

  &--hack {
    &::before{
      box-shadow: inset 0 0 0 1px $red;
    }
    &:hover::before{
      box-shadow: inset 0 0 0 50px $red;
    }
  }

  &--travel {
    &::before{
      box-shadow: inset 0 0 0 1px $yellow;
    }
    &:hover::before{
      box-shadow: inset 0 0 0 50px $yellow;
    }
  }

  &--bar {
    &::before{
      box-shadow: inset 0 0 0 1px $dark;
    }
    &:hover::before{
      box-shadow: inset 0 0 0 50px $dark;
    }
  }
}


// ###################### software #####################################

.software {
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;

  &__subheading {
    font-size: 25px;
    text-align: center;
    margin: 20px 0 15px;
    font-family: moon-light;
  }

  &__list {
    list-style: none;
    display: flex;
    justify-content: center;
    padding: 0;

    &:first-of-type {
      margin-bottom: 100px;
    }
  }

  &__list-item {
    margin: 20px 30px;
  }

  &__icon {
    height: 80px;
    width: 80px;
    // padding: 20px;
    background-color: white;

    &--git {
      height: 40px;
      margin-top: 20px;
    }

    &--chai {
      width: 60px;
      margin: 0 10px
    }
  }
}
